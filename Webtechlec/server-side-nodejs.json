
	[
      {
	    "title": "Server Side Scripting w/ Node.JS",
	    "description1": "History",
        "description2": "- The first implementation of Server-Side JavaScript (SSJS) was in Netscape’s LiveWire, which in 1996 included in the Enterprise Server 2.0. After the birth of the server-side JavaScript, a lot of companies tried their own alternative or version of server-side technologies in accordance to the existing server-side scripting technologies. Such examples are  Microsoft’s ASP, VBScript Language which also supports JavaScript and Perl Script. ",
        "description3": "- Microsoft has also their own version of Javascript which is JScript. To use either JavaScript or JScript, you have modify the opening script tag and set the language to the type of Javascript you would want to target.",
	    "description4": "",
	    "imageurl": "images/node1.jpg"
	  },
      {
	    "title": "Introduction",
	    "description1": "- JavaScript has traditionally run in browsers only. Other server-side JavaScript environments include Jaxer and Narwhal. However, Node.js, other than the other server-side JavaScript technologies, if offers event-based rather than thread-based. Thread based can induce a system thread for all requests made. Most web servers like Apache that are using PHP and other CGI scripts to serve it. ",
        "description2": "- Node.js, on the other hand, instead of implementing threads, it uses event loop and to scale connections ranging from hundred to millions. The role of most servers are to wait until it has its time to receive requests for I/O operations. Every Input or Output operation in Node.js is asynchronous, even though there are multiple requests, the server can continue responding to requests.JavaScript has functions and closures which is really suited to event-based programming and also the concept of callbacks and etc. ",
        "description3": "",
	    "description4": "",
	    "imageurl": ""
	  },
      {
	    "title": " Concepts on JavaScript as Server-Side Scripting ",
	    "description1": "Introduction",
        "description2": "",
        "description3": "",
	    "description4": "",
	    "imageurl": "images/node2.jpg"
	  },
      {
	    "title": "Server-Side JavaScript Object Model ",
	    "description1": "On the server, you also embed JavaScript in HTML pages. The server-side statements can connect to relational databases from different vendors, share information across users of an application, access the file system on the server, or communicate with other applications through LiveConnect and Java. HTML pages with server-side JavaScript can also include client-side JavaScript. ",
        "description2": "In contrast to pure client-side JavaScript pages, HTML pages that use server-side JavaScript are compiled into bytecode executable files. These application executables are run by a web server that contains the JavaScript runtime engine. For this reason, creating JavaScript applications is a two-stage process. In the first stage, shown in Figure 1.3, you create HTML pages (which can contain both client-side and server-side JavaScript statements) and JavaScript files. You then compile all of those files into a single executable. ",
        "description3": "",
	    "description4": "",
	    "imageurl": "images/node3.jpg"
	  },
      {
	    "title": "Query Language (SQL) database servers. Global Variables ",
	    "description1": "You can set global JS variables which can be accessed by other Content Containers in the page processing",
        "description2": "",
        "description3": "",
	    "description4": "",
	    "imageurl": "images/node4.jpg"
	  }
	]

